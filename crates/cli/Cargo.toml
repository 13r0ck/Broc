[package]
name = "broc_cli"
description = "The Broc binary that brings together all functionality in the Broc toolset."
default-run = "broc"

authors.workspace = true
edition.workspace = true
license.workspace = true
repository.workspace = true
version.workspace = true

[[bin]]
bench = false
name = "broc"
path = "src/main.rs"
test = false

[features]
default = ["target-aarch64", "target-x86_64", "target-wasm32"]

i386-cli-run = ["target-x86"]
wasm32-cli-run = ["target-wasm32", "run-wasm32"]

editor = ["broc_editor"]

run-wasm32 = ["broc_wasm_interp"]

# Compiling for a different target than the current machine can cause linker errors.
target-aarch64 = ["broc_build/target-aarch64", "broc_repl_cli/target-aarch64"]
target-arm = ["broc_build/target-arm", "broc_repl_cli/target-arm"]
target-wasm32 = ["broc_build/target-wasm32", "broc_repl_cli/target-wasm32"]
target-x86 = ["broc_build/target-x86", "broc_repl_cli/target-x86"]
target-x86_64 = ["broc_build/target-x86_64", "broc_repl_cli/target-x86_64"]

target-all = ["target-aarch64", "target-arm", "target-x86", "target-x86_64", "target-wasm32"]

sanitizers = ["broc_build/sanitizers"]


[dependencies]
broc_build = { path = "../compiler/build" }
broc_builtins = { path = "../compiler/builtins" }
broc_can = { path = "../compiler/can" }
broc_collections = { path = "../compiler/collections" }
broc_docs = { path = "../docs" }
broc_editor = { path = "../editor", optional = true }
broc_error_macros = { path = "../error_macros" }
broc_fmt = { path = "../compiler/fmt" }
broc_gen_llvm = { path = "../compiler/gen_llvm" }
broc_glue = { path = "../glue" }
broc_linker = { path = "../linker" }
broc_load = { path = "../compiler/load" }
broc_module = { path = "../compiler/module" }
broc_mono = { path = "../compiler/mono" }
broc_packaging = { path = "../packaging" }
broc_parse = { path = "../compiler/parse" }
broc_region = { path = "../compiler/region" }
broc_repl_cli = { path = "../repl_cli", optional = true }
broc_reporting = { path = "../reporting" }
broc_target = { path = "../compiler/broc_target" }
broc_tracing = { path = "../tracing" }
broc_wasm_interp = { path = "../wasm_interp", optional = true }

ven_pretty = { path = "../vendor/pretty" }

bumpalo.workspace = true
clap.workspace = true
const_format.workspace = true
errno.workspace = true
indoc.workspace = true
inkwell.workspace = true
libc.workspace = true
libloading.workspace = true
mimalloc.workspace = true
signal-hook.workspace = true
strum.workspace = true
target-lexicon.workspace = true
tempfile.workspace = true

# for now, uses unix/libc functions that windows does not support
[target.'cfg(not(windows))'.dependencies]
broc_repl_expect = { path = "../repl_expect" }


[dev-dependencies]
cli_utils = { path = "../cli_utils" }
broc_test_utils = { path = "../test_utils" }
broc_command_utils = { path = "../utils/command" }

criterion.workspace = true
indoc.workspace = true
parking_lot.workspace = true
pretty_assertions.workspace = true
serial_test.workspace = true

[[bench]]
name = "time_bench"
harness = false
