[package]
name = "broc_glue"
description = "Generates code needed for platform hosts to communicate with Broc apps. This tool is not necessary for writing a platform in another language, however, it's a great convenience! Currently supports Rust platforms, and the plan is to support any language via a plugin model."

authors.workspace = true
edition.workspace = true
license.workspace = true
version.workspace = true

[dependencies]
broc_build = { path = "../compiler/build" }
broc_builtins = { path = "../compiler/builtins" }
broc_can = { path = "../compiler/can" }
broc_collections = { path = "../compiler/collections" }
broc_error_macros = { path = "../error_macros" }
broc_gen_llvm= { path = "../compiler/gen_llvm" }
broc_linker = { path = "../linker"}
broc_load = { path = "../compiler/load" }
broc_module = { path = "../compiler/module" }
broc_mono = { path = "../compiler/mono" }
broc_packaging = { path = "../packaging" }
broc_reporting = { path = "../reporting" }
broc_std = { path = "../broc_std" }
broc_target = { path = "../compiler/broc_target" }
broc_tracing = { path = "../tracing" }
broc_types = { path = "../compiler/types" }

backtrace.workspace = true
bumpalo.workspace = true
fnv.workspace = true
indexmap.workspace = true
libc.workspace = true
libloading.workspace = true
strum.workspace = true
strum_macros.workspace = true
target-lexicon.workspace = true

[dev-dependencies]
cli_utils = { path = "../cli_utils" }
dircpy.workspace = true

indoc.workspace = true
pretty_assertions.workspace = true
tempfile.workspace = true
