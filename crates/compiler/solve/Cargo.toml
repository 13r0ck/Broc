[package]
name = "broc_solve"
description = "The entry point of Broc's type inference system. Implements type inference and specialization of abilities."

authors.workspace = true
edition.workspace = true
license.workspace = true
version.workspace = true

[dependencies]
broc_can = { path = "../can" }
broc_collections = { path = "../collections" }
broc_debug_flags = { path = "../debug_flags" }
broc_derive = { path = "../derive" }
broc_derive_key = { path = "../derive_key" }
broc_error_macros = { path = "../../error_macros" }
broc_exhaustive = { path = "../exhaustive" }
broc_module = { path = "../module" }
broc_packaging = { path = "../../packaging" }
broc_problem = { path = "../problem" }
broc_region = { path = "../region" }
broc_solve_problem = { path = "../solve_problem" }
broc_types = { path = "../types" }
broc_unify = { path = "../unify" }

arrayvec.workspace = true
bumpalo.workspace = true

[dev-dependencies]
broc_builtins = { path = "../builtins" }
broc_derive = { path = "../derive", features = ["debug-derived-symbols"] }
broc_load = { path = "../load" }
broc_parse = { path = "../parse" }
broc_problem = { path = "../problem" }
broc_reporting = { path = "../../reporting" }
broc_solve = { path = "../solve" }
broc_target = { path = "../broc_target" }
test_solve_helpers = { path = "../test_solve_helpers" }

bumpalo.workspace = true
indoc.workspace = true
insta.workspace = true
lazy_static.workspace = true
pretty_assertions.workspace = true
regex.workspace = true
tempfile.workspace = true
libtest-mimic.workspace = true
